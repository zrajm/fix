-*- org -*-

* fix-test
** TODO Tests statefile contents.
* fix
** TODO Merge and rename 'fixitude' -> 'fix'.
** TODO Runstate should be stored separately ('state/ABORT' should be there)
** TODO Prettier output. Each target name should only be outputted once.
** TODO Pass relevant args to buildscripts.
   Gup passes these:
   $1 - (absolute) path to a temporary file created for this target
   $2 - (relative) path to the target, from $CWD
** TODO Option '--list'
   List all targets generated by fix.
** TODO Option'--clean'.
   Erase all targets generated by fix.
** TODO Option to generate Graphviz file of build graph.
** TODO Statefiles should be write protected.
   As in git, all statefiles should be chmodded '-w' to prevent accidental
   deletion.
** TODO Clean rebuilds when statedir was deleted.
   If a rebuild is attempted when statedir have been deleted - build anyway.
   Then, before renaming each temporary output file, compare it with any
   previously built target, and produce an 'target externally modified' error
   if the newly generated target looks different. (Don't produce error, just
   overwrite if '--force' is being used.)

   If the newly generated target looks the same, just update the state, and
   keep the old target.
** TODO Don't overwrite externally modified tempfiles.
   E.i. refuse to do it, if it already exists, and wasn't produced by fixitude
   itself)
** TODO Parallel builds.
** TODO Magic numbers (#!) in buildscripts
   The following post on the Google Group for redo, suggests that all .do files
   should be "opaque executables". (Arguing that this would be a killer app for
   redo, allowing everyone to write build scripts *in their own language*.)

   [[ https://groups.google.com/forum/#!topic/redo-list/yeBwxcXvm8c][A solution to the portability (and a bunch of other) problems]]
** TODO Allow buildscripts to write to tempfile directly.
   I.e. if a buildscript wrote to standard output, write that to target; or if
   it wrote to the tempfile directly, write that.
** TODO Option to specify target directory.
   Fix should support having separate directories for source files,
   buildscripts and target files. E.g. you should be able to say something like
   '--target=publish', in order to have all generated targets produced in
   'publish' (a directory which would then contain *only* generated targets, no
   buildscripts, nor sources).
* Someday/maybe
** TODO Don't create target file when buildscript doesn't output anything.
   Is this a good idea, or will it confuse the user?

   Apenwarr redo generates no output file if nothing was written by a rule. Is
   this good? Should we do this too? (Note, however, that apenwarr redo also
   does not attempt to regenerate the non-existing output, unless any
   dependencies have changed. 'redo-ifchange target' works to build the target
   the first time, but after that it does not run unless changes were made in
   the dependencies.)

   This in itself is good for a target like 'all', but how about something like
   'clean'?
** TODO Remove 'File::Path' dependency(?)
   Is this really motivated? -- If so, need to replace 'mkpath' and 'rmtree'
   with own functions.
* Inspiration
  Info about other redo, or redo inspired, implementations.
** [[http://pozorvlak.livejournal.com/159621.html?nojs=1][A quick introduction to redo]] (by pozorvlak, on Livejournal, 2011-01-14)
** [[http://pozorvlak.livejournal.com/159126.html?nojs=1][Redo from scratch]] (by pozorvlak, on Livejournal, 2011-01-12)
** [[https://github.com/apenwarr/redo/tree/master/Documentation][Redo manpages]] (by apenwarr, on GitHub)
** [[https://groups.google.com/forum/#!topic/redo-list/HEITPe64D1Q][Announcing `gup`, a fork of redo]] (by gfxmonk, on Redo Google Group)
   Summary: Redo has a problem in that, if it is run with its statefiles
   deleted, and there are previously generated targets still lying around, then
   those generated targets are taken for source files, and are (silently) not
   rebuilt. This is non-obvious, and requires manual intervention to fix. Gup
   solves this problem.
** [[https://github.com/gfxmonk/gup][Gup - A better make, inspired by djb's redo.]] (by gfxmonk, on GitHub)
