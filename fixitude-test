#!/usr/bin/perl
use strict;
use warnings;
use 5.10.0;
use Test::More;
use Cwd qw/cwd realpath/;
use File::Path 'rmtree';

use Carp 'confess';
$SIG{__DIE__} = \&Carp::confess;

###############################################################################
##                                                                           ##
##  Functions                                                                ##
##                                                                           ##
###############################################################################

# Delete file. Ignore errors if file is gone in the end.
sub delete_file {
    my (@file) = @_;
    foreach my $file (@file) {
        unlink($file) or do {
            my $msg = $!;
            die "Failed to delete file '$file': $msg," if -f $file;
        };
    }
}

# Write to a temporary file, so that we know the inode number will change when
# file is written. This to avoid using Time::HiRes in the fingerprinting.
sub write_file {
    my ($file, @data) = @_;
    my $outfile = "$file--tmp";
    open(my $out, '>', $outfile)
        or die "Failed to open file '$file' for writing: $!,";
    print $out @data;
    close($out)
        or die "Failed to close file '$file' after writing: $!,";
    rename($outfile, $file)
        or die "Failed rename tempfile '$outfile' -> '$file' after writing: $!\n";
}

sub read_file {
    my ($file) = @_;
    open(my $in, '<', $file)
        or die "Failed to open file '$file' for reading: $!,";
    local $/ = undef;
    return <$in>;
}

# Return file fingerprint (or empty string if file doesn't exist).
#
# BORKEN! We use 'stat', not 'lstat' here (since the Time::HiRes version I have
# doesn't support 'lstat') -- It was added to the module February 2013. :(
# (See: https://rt.cpan.org/Public/Bug/Display.html?id=83356)
{
    #use Time::HiRes 'stat';
    sub read_file_fingerprint {
        my ($file) = @_;
        my @stat = stat($file);
        return join("-", @stat ? @stat[1, 2, 4, 5, 7, 9, 10] : ());
    }
}

# Return hash of filenames (as keys) and stat fingerprints (as values).
sub fingerprints {
    my (@file) = @_;
    return map {
        $_ => read_file_fingerprint($_);
    } @file;
}

sub abspath {
    my ($file) = @_;
    my ($dirname, $basename) =
        ($file =~ m#^(.*)/(.*)$# ? ($1, $2) : ('.', $file));
    $dirname = realpath($dirname);
    return $dirname . ($dirname =~ m#/$# ? '' : '/') . $basename;
}

sub make_tempdir {
    my ($name) = @_;
    my $tempdir = `mktemp -td $name-XXXXXX`;
    chomp($tempdir);
    return $tempdir;
}

sub nl { join "", map "$_\n", @_ }

###############################################################################
##                                                                           ##
##  Init                                                                     ##
##                                                                           ##
###############################################################################

my $fix = abspath(__FILE__);
$fix =~ s#-test.*?##;

my ($name) = $fix =~ m#([^/]+)$#;

my $testdir = make_tempdir($name);
chdir($testdir) or die "Failed to cd to '$testdir': $!,";

if ($name eq 'fix') { system("$fix --init") }

###############################################################################
##                                                                           ##
##  Tests                                                                    ##
##                                                                           ##
###############################################################################

note "Non-existing buildscript";
{
    my %a = fingerprints(qw/ 1.fix /);
    my $r = system("$fix 1 2>/dev/null");
    my %b = fingerprints(qw/ 1.fix /);

    is  ($r >> 8,          2,           "Exit status");
    is  ($a{'1.fix'},      $b{'1.fix'}, "Buildscript unmodified");
    ok  (! -f '1--fixing',              "Tempfile non-existing");
    ok  (! -f '1',                      "Target non-existing");
}
note "Buildscript with exit status = 1";
write_file('1.fix', nl('echo FIRST', 'exit 1', 'echo SECOND'));
{
    delete_file('1--fixing');

    my %a = fingerprints(qw/ 1.fix 1--fixing /);
    my $r = system("$fix 1 2>/dev/null");
    my %b = fingerprints(qw/ 1.fix 1--fixing /);

    is  ($r >> 8,                1,               "Exit status");
    is  ($a{'1.fix'},            $b{'1.fix'},     "Buildscript unmodified");
    ok  (  -f '1--fixing',                        "Tempfile existing");
    isnt($a{'1--fixing'},        $b{'1--fixing'}, "Tempfile modified");
    is  (read_file('1--fixing'), nl('FIRST'),     "Tempfile content");
    ok  (! -f '1',                                "Target non-existing");

}
note "Buildscript with exit status = 2";
write_file('1.fix', nl('echo FIRST', 'exit 2', 'echo SECOND'));
{
    delete_file('1--fixing');

    my %a = fingerprints(qw/ 1.fix 1--fixing /);
    my $r = system("$fix 1 2>/dev/null");
    my %b = fingerprints(qw/ 1.fix 1--fixing /);

    is  ($r >> 8,                2,               "Exit status");
    is  ($a{'1.fix'},            $b{'1.fix'},     "Buildscript unmodified");
    ok  (  -f '1--fixing',                        "Tempfile existing");
    isnt($a{'1--fixing'},        $b{'1--fixing'}, "Tempfile modified");
    is  (read_file('1--fixing'), nl('FIRST'),     "Tempfile content");
    ok  (! -f '1',                                "Target non-existing");
}
note "Buildscript with command returning false";
write_file('1.fix', nl('echo FIRST', 'false', 'echo SECOND'));
{
    delete_file('1--fixing');

    my %a = fingerprints(qw/ 1.fix 1--fixing /);
    my $r = system("$fix 1 2>/dev/null");
    my %b = fingerprints(qw/ 1.fix 1--fixing /);

    is  ($r >> 8,                1,               "Exit status");
    is  ($a{'1.fix'},            $b{'1.fix'},     "Buildscript unmodified");
    ok  (  -f '1--fixing',                        "Tempfile existing");
    isnt($a{'1--fixing'},        $b{'1--fixing'}, "Tempfile modified");
    is  (read_file('1--fixing'), nl('FIRST'),     "Tempfile content");
    ok  (! -f '1',                                "Target non-existing");
}
note "Buildscript with non-existing command";
write_file('1.fix', nl("NONEXISTING-SHELL-COMMAND"));
{
    delete_file('1--fixing');

    my %a = fingerprints(qw/ 1.fix 1--fixing /);
    my $r = system("$fix 1 2>/dev/null");
    my %b = fingerprints(qw/ 1.fix 1--fixing /);

    is  ($r >> 8,                127,             "Exit status");
    is  ($a{'1.fix'},            $b{'1.fix'},     "Buildscript unmodified");
    ok  (-f '1--fixing',                          "Tempfile existing");
    isnt($a{'1--fixing'},        $b{'1--fixing'}, "Tempfile modified");
    is  (read_file('1--fixing'), '',              "Tempfile content");
    ok  (! -f '1',                                "Target non-existing");
}
note "First run of (working) buildscript";
write_file('1.fix', nl('echo 11'));
{
    my %a = fingerprints(qw/ 1.fix 1 /);
    my $r = system("$fix 1 2>/dev/null");
    my %b = fingerprints(qw/ 1.fix 1 /);

    is  ($r >> 8,          0,           "Exit status");
    is  ($a{'1.fix'},      $b{'1.fix'}, "Buildscript unmodified");
    ok  (! -f '1--fixing',              "Tempfile non-existing");
    ok  (  -f '1',                      "Target existing");
    isnt($a{'1'},          $b{'1'},     "Target modified");
    is  (read_file('1'),   nl('11'),    "Target content");
}
note "Rerun without changes";
{
    my %a = fingerprints(qw/ 1.fix 1 /);
    my $r = system("$fix 1 2>/dev/null");
    my %b = fingerprints(qw/ 1.fix 1 /);

    is  ($r >> 8,          0,           "Exit status");
    is  ($a{'1.fix'},      $b{'1.fix'}, "Buildscript unmodified");
    ok  (! -f '1--fixing',              "Tempfile non-existing");
    ok  (  -f '1',                      "Target existing");
    is  ($a{'1'},          $b{'1'},     "Target unmodified");
    is  (read_file('1'),   nl('11'),    "Target content");
}
note "Rerun after target was externally modified";
{
    write_file('1', nl('XXX'));    # modify target file

    my %a = fingerprints(qw/ 1.fix 1 /);
    my $r = system("$fix 1 2>/dev/null");
    my %b = fingerprints(qw/ 1.fix 1 /);

    is  ($r >> 8,          1,           "Exit status");
    is  ($a{'1.fix'},      $b{'1.fix'}, "Buildscript unmodified");
    ok  (! -f '1--fixing',              "Tempfile non-existing");
    ok  (  -f '1',                      "Target existing");
    is  ($a{'1'},          $b{'1'},     "Target unmodified");
    is  (read_file('1'),   nl('XXX'),   "Target content");
}
note "Rerun after target was deleted";
{
    delete_file('1');

    my %a = fingerprints(qw/ 1.fix 1 /);
    my $r = system("$fix 1 2>/dev/null");
    my %b = fingerprints(qw/ 1.fix 1 /);

    is  ($r >> 8,          0,           "Exit status");
    is  ($a{'1.fix'},      $b{'1.fix'}, "Buildscript unmodified");
    ok  (! -f '1--fixing',              "Tempfile non-existing");
    ok  (  -f '1',                      "Target existing");
    isnt($a{'1'},          $b{'1'},     "Target modified");
    is  (read_file('1'),   nl('11'),    "Target content");
}
note "Rerun after buildscript was changed, but give same output";
write_file('1.fix', nl('echo 11', '# COMMENT'));
{
    my %a = fingerprints(qw/ 1.fix 1 /);
    my $r = system("$fix 1 2>/dev/null");
    my %b = fingerprints(qw/ 1.fix 1 /);

    is  ($r >> 8,          0,           "Exit status");
    is  ($a{'1.fix'},      $b{'1.fix'}, "Buildscript unmodified");
    ok  (! -f '1--fixing',              "Tempfile non-existing");
    ok  (  -f '1',                      "Target existing");
    is  ($a{'1'},          $b{'1'},     "Target unmodified");
    is  (read_file('1'),   nl('11'),    "Target content");
}
note "Rerun after buildscript was changed, and give new output";
write_file('1.fix', nl('echo 1'));
{
    my %a = fingerprints(qw/ 1.fix 1 /);
    my $r = system("$fix 1 2>/dev/null");
    my %b = fingerprints(qw/ 1.fix 1 /);

    is  ($r >> 8,          0,           "Exit status");
    is  ($a{'1.fix'},      $b{'1.fix'}, "Buildscript unmodified");
    ok  (! -f '1--fixing',              "Tempfile non-existing");
    ok  (  -f '1',                      "Target existing");
    isnt($a{'1'},          $b{'1'},     "Target modified");
    is  (read_file('1'),   nl('1'),     "Target content");
}

# clear all existing files
rmtree([ ".$name", "1", "1.fix" ]);

note "First run of buildscript with dependencies";
write_file('a.fix',    nl('echo a'));
write_file('b.fix',    nl('echo b'));
write_file('1.fix',    nl('echo 1'));
write_file('2.fix',    nl('echo 2'));
write_file('12.fix',   nl('$FIX_CMD 1 2',   'echo 12',   'cat 1 2 | sed "s/^/>/"'));
write_file('ab.fix',   nl('$FIX_CMD a b',   'echo ab',   'cat a b | sed "s/^/>/"'));
write_file('ab12.fix', nl('$FIX_CMD ab 12', 'echo ab12', 'cat ab 12 | sed "s/^/>/"'));
my ($_a, $_b, $_1, $_2, $_ab, $_12, $_ab12);
$_a    = nl(qw/           a                 /); # expected target content
$_b    = nl(qw/               b             /);
$_1    = nl(qw/                       1     /);
$_2    = nl(qw/                           2 /);
$_ab   = nl(qw/      ab  >a  >b             /);
$_12   = nl(qw/                  12  >1  >2 /);
$_ab12 = nl(qw/ab12 >ab >>a >>b >12 >>1 >>2 /);
{
    my %a = fingerprints(qw/ a     b     1     2     ab     12     ab12
                             a.fix b.fix 1.fix 2.fix ab.fix 12.fix ab12.fix /);
    my $r = system("$fix ab12 2>/dev/null");
    my %b = fingerprints(qw/ a     b     1     2     ab     12     ab12
                             a.fix b.fix 1.fix 2.fix ab.fix 12.fix ab12.fix /);

    is  ($r >> 8,             0,              "Exit status");
    is  ($a{'a.fix'},         $b{'a.fix'},    "Buildscript unmodified: 'a.fix'");
    is  ($a{'b.fix'},         $b{'b.fix'},    "Buildscript unmodified: 'b.fix'");
    is  ($a{'1.fix'},         $b{'1.fix'},    "Buildscript unmodified: '1.fix'");
    is  ($a{'2.fix'},         $b{'2.fix'},    "Buildscript unmodified: '2.fix'");
    is  ($a{'ab.fix'},        $b{'ab.fix'},   "Buildscript unmodified: 'ab.fix'");
    is  ($a{'12.fix'},        $b{'12.fix'},   "Buildscript unmodified: '12.fix'");
    is  ($a{'ab12.fix'},      $b{'ab12.fix'}, "Buildscript unmodified: 'ab12.fix'");
    ok  (! -f 'a--fixing',                    "Tempfile non-existing: 'a--fixing'");
    ok  (! -f 'b--fixing',                    "Tempfile non-existing: 'b--fixing'");
    ok  (! -f '1--fixing',                    "Tempfile non-existing: '1--fixing'");
    ok  (! -f '2--fixing',                    "Tempfile non-existing: '2--fixing'");
    ok  (! -f 'ab--fixing',                   "Tempfile non-existing: 'ab--fixing'");
    ok  (! -f '12--fixing',                   "Tempfile non-existing: '12--fixing'");
    ok  (! -f 'ab12--fixing',                 "Tempfile non-existing: 'ab12-fixing'");
    ok  (  -f 'a',                            "Target existing: 'a'");
    ok  (  -f 'b',                            "Target existing: 'b'");
    ok  (  -f '1',                            "Target existing: '1'");
    ok  (  -f '2',                            "Target existing: '2'");
    ok  (  -f 'ab',                           "Target existing: 'ab'");
    ok  (  -f '12',                           "Target existing: '12'");
    ok  (  -f 'ab12',                         "Target existing: 'ab12'");
    isnt($a{'a'},             $b{'a'},        "Target modified: 'a'");
    isnt($a{'b'},             $b{'b'},        "Target modified: 'b'");
    isnt($a{'1'},             $b{'1'},        "Target modified: '1'");
    isnt($a{'2'},             $b{'2'},        "Target modified: '2'");
    isnt($a{'ab'},            $b{'ab'},       "Target modified: 'ab'");
    isnt($a{'12'},            $b{'12'},       "Target modified: '12'");
    isnt($a{'ab12'},          $b{'ab12'},     "Target modified: 'ab12'");
    is  (read_file('a'),      $_a,            "Target content: 'a'");
    is  (read_file('b'),      $_b,            "Target content: 'b'");
    is  (read_file('1'),      $_1,            "Target content: '1'");
    is  (read_file('2'),      $_2,            "Target content: '2'");
    is  (read_file('ab'),     $_ab,           "Target content: 'ab'");
    is  (read_file('12'),     $_12,           "Target content: '12'");
    is  (read_file('ab12'),   $_ab12,         "Target content: 'ab12'");
}
note "Rerun without change of buildscript with dependencies";
{
    my %a = fingerprints(qw/ a     b     1     2     ab     12     ab12
                             a.fix b.fix 1.fix 2.fix ab.fix 12.fix ab12.fix /);
    my $r = system("$fix ab12 2>/dev/null");
    my %b = fingerprints(qw/ a     b     1     2     ab     12     ab12
                             a.fix b.fix 1.fix 2.fix ab.fix 12.fix ab12.fix /);

    is  ($r >> 8,             0,              "Exit status");
    is  ($a{'a.fix'},         $b{'a.fix'},    "Buildscript unmodified: 'a.fix'");
    is  ($a{'b.fix'},         $b{'b.fix'},    "Buildscript unmodified: 'b.fix'");
    is  ($a{'1.fix'},         $b{'1.fix'},    "Buildscript unmodified: '1.fix'");
    is  ($a{'2.fix'},         $b{'2.fix'},    "Buildscript unmodified: '2.fix'");
    is  ($a{'ab.fix'},        $b{'ab.fix'},   "Buildscript unmodified: 'ab.fix'");
    is  ($a{'12.fix'},        $b{'12.fix'},   "Buildscript unmodified: '12.fix'");
    is  ($a{'ab12.fix'},      $b{'ab12.fix'}, "Buildscript unmodified: 'ab12.fix'");
    ok  (! -f 'a--fixing',                    "Tempfile non-existing: 'a--fixing'");
    ok  (! -f 'b--fixing',                    "Tempfile non-existing: 'b--fixing'");
    ok  (! -f '1--fixing',                    "Tempfile non-existing: '1--fixing'");
    ok  (! -f '2--fixing',                    "Tempfile non-existing: '2--fixing'");
    ok  (! -f 'ab--fixing',                   "Tempfile non-existing: 'ab--fixing'");
    ok  (! -f '12--fixing',                   "Tempfile non-existing: '12--fixing'");
    ok  (! -f 'ab12--fixing',                 "Tempfile non-existing: 'ab12-fixing'");
    ok  (  -f 'a',                            "Target existing: 'a'");
    ok  (  -f 'b',                            "Target existing: 'b'");
    ok  (  -f '1',                            "Target existing: '1'");
    ok  (  -f '2',                            "Target existing: '2'");
    ok  (  -f 'ab',                           "Target existing: 'ab'");
    ok  (  -f '12',                           "Target existing: '12'");
    ok  (  -f 'ab12',                         "Target existing: 'ab12'");
    is  ($a{'a'},             $b{'a'},        "Target unmodified: 'a'");
    is  ($a{'b'},             $b{'b'},        "Target unmodified: 'b'");
    is  ($a{'1'},             $b{'1'},        "Target unmodified: '1'");
    is  ($a{'2'},             $b{'2'},        "Target unmodified: '2'");
    is  ($a{'ab'},            $b{'ab'},       "Target unmodified: 'ab'");
    is  ($a{'12'},            $b{'12'},       "Target unmodified: '12'");
    is  ($a{'ab12'},          $b{'ab12'},     "Target unmodified: 'ab12'");
}
note "Rerun after change of subtarget '2'";
write_file('2.fix', nl('echo 22'));
$_a    = nl(qw/           a                  /); # expected target content
$_b    = nl(qw/               b              /);
$_1    = nl(qw/                       1      /);
$_2    = nl(qw/                           22 /);   # -> changed
$_ab   = nl(qw/      ab  >a  >b              /);
$_12   = nl(qw/                  12  >1  >22 /);   # -> changed
$_ab12 = nl(qw/ab12 >ab >>a >>b >12 >>1 >>22 /);   # -> changed
{
    my %a = fingerprints(qw/ a     b     1     2     ab     12     ab12
                             a.fix b.fix 1.fix 2.fix ab.fix 12.fix ab12.fix /);
    my $r = system("$fix ab12 2>/dev/null");
    my %b = fingerprints(qw/ a     b     1     2     ab     12     ab12
                             a.fix b.fix 1.fix 2.fix ab.fix 12.fix ab12.fix /);

    is  ($r >> 8,             0,              "Exit status");
    is  ($a{'a.fix'},         $b{'a.fix'},    "Buildscript unmodified: 'a.fix'");
    is  ($a{'b.fix'},         $b{'b.fix'},    "Buildscript unmodified: 'b.fix'");
    is  ($a{'1.fix'},         $b{'1.fix'},    "Buildscript unmodified: '1.fix'");
    is  ($a{'2.fix'},         $b{'2.fix'},    "Buildscript unmodified: '2.fix'");
    is  ($a{'ab.fix'},        $b{'ab.fix'},   "Buildscript unmodified: 'ab.fix'");
    is  ($a{'12.fix'},        $b{'12.fix'},   "Buildscript unmodified: '12.fix'");
    is  ($a{'ab12.fix'},      $b{'ab12.fix'}, "Buildscript unmodified: 'ab12.fix'");
    ok  (! -f 'a--fixing',                    "Tempfile non-existing: 'a--fixing'");
    ok  (! -f 'b--fixing',                    "Tempfile non-existing: 'b--fixing'");
    ok  (! -f '1--fixing',                    "Tempfile non-existing: '1--fixing'");
    ok  (! -f '2--fixing',                    "Tempfile non-existing: '2--fixing'");
    ok  (! -f 'ab--fixing',                   "Tempfile non-existing: 'ab--fixing'");
    ok  (! -f '12--fixing',                   "Tempfile non-existing: '12--fixing'");
    ok  (! -f 'ab12--fixing',                 "Tempfile non-existing: 'ab12-fixing'");
    ok  (  -f 'a',                            "Target existing: 'a'");
    ok  (  -f 'b',                            "Target existing: 'b'");
    ok  (  -f '1',                            "Target existing: '1'");
    ok  (  -f '2',                            "Target existing: '2'");
    ok  (  -f 'ab',                           "Target existing: 'ab'");
    ok  (  -f '12',                           "Target existing: '12'");
    ok  (  -f 'ab12',                         "Target existing: 'ab12'");
    isnt($a{'2'},             $b{'2'},        "Target modified: '2'");
    isnt($a{'12'},            $b{'12'},       "Target modified: '12'");
    isnt($a{'ab12'},          $b{'ab12'},     "Target modified: 'ab12'");
    is  ($a{'a'},             $b{'a'},        "Target unmodified: 'a'");
    is  ($a{'b'},             $b{'b'},        "Target unmodified: 'b'");
    is  ($a{'1'},             $b{'1'},        "Target unmodified: '1'");
    is  ($a{'ab'},            $b{'ab'},       "Target unmodified: 'ab'");
    is  (read_file('a'),      $_a,            "Target content: 'a'");
    is  (read_file('b'),      $_b,            "Target content: 'b'");
    is  (read_file('1'),      $_1,            "Target content: '1'");
    is  (read_file('2'),      $_2,            "Target content: '2'");
    is  (read_file('ab'),     $_ab,           "Target content: 'ab'");
    is  (read_file('12'),     $_12,           "Target content: '12'");
    is  (read_file('ab12'),   $_ab12,         "Target content: 'ab12'");
}
note "Rerun after a dependency (target) has been deleted";
{
    delete_file('12');

    my %a = fingerprints(qw/ a     b     1     2     ab     12     ab12
                             a.fix b.fix 1.fix 2.fix ab.fix 12.fix ab12.fix /);
    my $r = system("$fix ab12 2>/dev/null");
    my %b = fingerprints(qw/ a     b     1     2     ab     12     ab12
                             a.fix b.fix 1.fix 2.fix ab.fix 12.fix ab12.fix /);

    is  ($r >> 8,             0,              "Exit status");
    is  ($a{'a.fix'},         $b{'a.fix'},    "Buildscript unmodified: 'a.fix'");
    is  ($a{'b.fix'},         $b{'b.fix'},    "Buildscript unmodified: 'b.fix'");
    is  ($a{'1.fix'},         $b{'1.fix'},    "Buildscript unmodified: '1.fix'");
    is  ($a{'2.fix'},         $b{'2.fix'},    "Buildscript unmodified: '2.fix'");
    is  ($a{'ab.fix'},        $b{'ab.fix'},   "Buildscript unmodified: 'ab.fix'");
    is  ($a{'12.fix'},        $b{'12.fix'},   "Buildscript unmodified: '12.fix'");
    is  ($a{'ab12.fix'},      $b{'ab12.fix'}, "Buildscript unmodified: 'ab12.fix'");
    ok  (! -f 'a--fixing',                    "Tempfile non-existing: 'a--fixing'");
    ok  (! -f 'b--fixing',                    "Tempfile non-existing: 'b--fixing'");
    ok  (! -f '1--fixing',                    "Tempfile non-existing: '1--fixing'");
    ok  (! -f '2--fixing',                    "Tempfile non-existing: '2--fixing'");
    ok  (! -f 'ab--fixing',                   "Tempfile non-existing: 'ab--fixing'");
    ok  (! -f '12--fixing',                   "Tempfile non-existing: '12--fixing'");
    ok  (! -f 'ab12--fixing',                 "Tempfile non-existing: 'ab12-fixing'");
    ok  (  -f 'a',                            "Target existing: 'a'");
    ok  (  -f 'b',                            "Target existing: 'b'");
    ok  (  -f '1',                            "Target existing: '1'");
    ok  (  -f '2',                            "Target existing: '2'");
    ok  (  -f 'ab',                           "Target existing: 'ab'");
    ok  (  -f '12',                           "Target existing: '12'");
    ok  (  -f 'ab12',                         "Target existing: 'ab12'");
    isnt($a{'12'},            $b{'12'},       "Target modified: '12'");
    is  ($a{'a'},             $b{'a'},        "Target unmodified: 'a'");
    is  ($a{'b'},             $b{'b'},        "Target unmodified: 'b'");
    is  ($a{'1'},             $b{'1'},        "Target unmodified: '1'");
    is  ($a{'2'},             $b{'2'},        "Target unmodified: '2'");
    is  ($a{'ab'},            $b{'ab'},       "Target unmodified: 'ab'");
    is  ($a{'ab12'},          $b{'ab12'},     "Target unmodified: 'ab12'");
    is  (read_file('a'),      $_a,            "Target content: 'a'");
    is  (read_file('b'),      $_b,            "Target content: 'b'");
    is  (read_file('1'),      $_1,            "Target content: '1'");
    is  (read_file('2'),      $_2,            "Target content: '2'");
    is  (read_file('ab'),     $_ab,           "Target content: 'ab'");
    is  (read_file('12'),     $_12,           "Target content: '12'");
    is  (read_file('ab12'),   $_ab12,         "Target content: 'ab12'");
}
note "Rerun after dependency target '1' was externally modified";
{
    write_file('1', nl('XXX'));    # modify target file

    my %a = fingerprints(qw/ a     b     1     2     ab     12     ab12
                             a.fix b.fix 1.fix 2.fix ab.fix 12.fix ab12.fix /);
    my $r = system("$fix ab12 2>/dev/null");
    my %b = fingerprints(qw/ a     b     1     2     ab     12     ab12
                             a.fix b.fix 1.fix 2.fix ab.fix 12.fix ab12.fix /);

    is  ($r >> 8,             1,              "Exit status");
    is  ($a{'a.fix'},         $b{'a.fix'},    "Buildscript unmodified: 'a.fix'");
    is  ($a{'b.fix'},         $b{'b.fix'},    "Buildscript unmodified: 'b.fix'");
    is  ($a{'1.fix'},         $b{'1.fix'},    "Buildscript unmodified: '1.fix'");
    is  ($a{'2.fix'},         $b{'2.fix'},    "Buildscript unmodified: '2.fix'");
    is  ($a{'ab.fix'},        $b{'ab.fix'},   "Buildscript unmodified: 'ab.fix'");
    is  ($a{'12.fix'},        $b{'12.fix'},   "Buildscript unmodified: '12.fix'");
    is  ($a{'ab12.fix'},      $b{'ab12.fix'}, "Buildscript unmodified: 'ab12.fix'");
    ok  (! -f 'a--fixing',                    "Tempfile non-existing: 'a--fixing'");
    ok  (! -f 'b--fixing',                    "Tempfile non-existing: 'b--fixing'");
    ok  (! -f '1--fixing',                    "Tempfile non-existing: '1--fixing'");
    ok  (! -f '2--fixing',                    "Tempfile non-existing: '2--fixing'");
    ok  (! -f 'ab--fixing',                   "Tempfile non-existing: 'ab--fixing'");
    ok  (! -f '12--fixing',                   "Tempfile non-existing: '12--fixing'");
    ok  (! -f 'ab12--fixing',                 "Tempfile non-existing: 'ab12-fixing'");
    ok  (  -f 'a',                            "Target existing: 'a'");
    ok  (  -f 'b',                            "Target existing: 'b'");
    ok  (  -f '1',                            "Target existing: '1'");
    ok  (  -f '2',                            "Target existing: '2'");
    ok  (  -f 'ab',                           "Target existing: 'ab'");
    ok  (  -f '12',                           "Target existing: '12'");
    ok  (  -f 'ab12',                         "Target existing: 'ab12'");
    is  ($a{'a'},             $b{'a'},        "Target unmodified: 'a'");
    is  ($a{'b'},             $b{'b'},        "Target unmodified: 'b'");
    is  ($a{'1'},             $b{'1'},        "Target unmodified: '1'");
    is  ($a{'2'},             $b{'2'},        "Target unmodified: '2'");
    is  ($a{'12'},            $b{'12'},       "Target unmodified: '12'");
    is  ($a{'ab'},            $b{'ab'},       "Target unmodified: 'ab'");
    is  ($a{'ab12'},          $b{'ab12'},     "Target unmodified: 'ab12'");
    is  (read_file('a'),      $_a,            "Target content: 'a'");
    is  (read_file('b'),      $_b,            "Target content: 'b'");
    is  (read_file('1'),      nl('XXX'),      "Target content: '1'");
    is  (read_file('2'),      $_2,            "Target content: '2'");
    is  (read_file('ab'),     $_ab,           "Target content: 'ab'");
    is  (read_file('12'),     $_12,           "Target content: '12'");
    is  (read_file('ab12'),   $_ab12,         "Target content: 'ab12'");
}

END {
    done_testing();
    note
        "Command: $name\n",
        "Tempdir: $testdir\n",
}

#[eof]
