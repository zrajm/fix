-*- org -*-

* Testing
** TODO Test statefile content for ABORT
** TODO Test $FIX_* variables
** TODO Test for B<--verbose>
** TODO Test for B<--xtrace>
* Main program
** TODO Pass args to buildscripts
   NOTA BENE: When implemented, check all occurrences of $1, $2 and $3 in POD
   and make sure they're updated to reflect what is actually passed to the
   buildscripts.

   Gup passes these:
   $1 - (absolute) path to a temporary file created for this target
   $2 - (relative) path to the target, from $CWD

   Redo passes these:
   $1 - name of the target file
   $2 - basename of the target, minus the extension, if any
   $3 - name of a temporary file that will be renamed to the target filename
        atomically if your .do file returns a zero (success) exit code
   -----
** TODO Merge the good stuff from old 'fix' into current source
** TODO Checksum based dependencies
   You have the following files: 'a' which depends on 'b' which depends on 'c'.

   You make a change in 'c', and run 'fix b' -- thereby causing 'b' and 'c' to
   be rebuilt (and have their updated state written).

   If you now run 'fix a', then 'a' *should* be rebuild, but, since 'a' only
   relies on 'b', and 'b' is up-to-date, then 'a' is up-to-date too!

   'a' should depend on 'b' + checksum of 'b', and 'b' should depend on 'c' +
   checksum of 'c', so that if file content changes, the file will be rebuilt,
   regardless of how the fix command was invoked.
** TODO Drop Data::Dumper dependency
   Statefiles should be written in simple attribute/value format, so that a
   file looking like this (what about file name parsing -- something that can
   represent everything allowed in a filename?):

       checksum: b282f06fc2cb678ccf84e3ae8b1317be81252391
       deps: 'ab12.fix'
       deps: 'ab', '12'
       type: target

   Would load into a data structure looking like this:

       {
           'checksum' => 'b282f06fc2cb678ccf84e3ae8b1317be81252391',
           'deps' => [
               [ 'ab12.fix' ],
               [ 'ab', '12' ]
           ],
           'type' => 'target'
       }
** TODO Runstate should be stored separately ('state/ABORT' should be there)
** TODO Prettier output output each target name just once
** TODO Add option '--always' to rebuild everything
   Described in POD (uncomment when implemented).
   Alternative option names '--all' or '--dirty'?
** TODO Add option '--clean'
   Described in POD (uncomment when implemented).
** TODO Add option '--force'
   Described in POD (uncomment when implemented).
** TODO Add option '--list'
   Described in POD (uncomment when implemented).
** TODO Add option '--plot'(?) to generate Graphviz file of build graph
   Option name '--plot' maybe?
** TODO Add option '--target'(?) to specify target directory
   Mention this in POD (under 'buildscript' in GLOSSARY), when implemented.

   Fix should support having separate directories for source files,
   buildscripts and target files. E.g. you should be able to say something like
   '--target=publish', in order to have all generated targets produced in
   'publish' (a directory which would then contain *only* generated targets, no
   buildscripts, nor sources).
** TODO Add option '--watch'(?) to monitor and rebuild on changes
   Option name '--watch' or '--auto' maybe? Would use inotifywait to look for
   changes and rebuild, whenever something is written.
** TODO write protected statefiles
   As in git, all statefiles should be chmodded '-w' to prevent accidental
   deletion.
** TODO Clean rebuilds when statedir was deleted.
   If a rebuild is attempted when statedir have been deleted - build anyway.
   Then, before renaming each temporary output file, compare it with any
   previously built target, and produce an 'target externally modified' error
   if the newly generated target looks different. (Don't produce error, just
   overwrite if '--force' is being used.)

   If the newly generated target looks the same, just update the state, and
   keep the old target.
** TODO Don't overwrite externally modified tempfiles
   E.i. refuse to do it, if it already exists, and wasn't produced by fixitude
   itself)
** TODO Parallel builds
   Fork and run parallel 'fix' for each argument given.
** TODO Magic numbers (#!) in buildscripts
   The following post on the Google Group for redo, suggests that all .do files
   should be "opaque executables". (Arguing that this would be a killer app for
   redo, allowing everyone to write build scripts *in their own language*.)

   [[ https://groups.google.com/forum/#!topic/redo-list/yeBwxcXvm8c][A solution to the portability (and a bunch of other) problems]]
** TODO Allow buildscripts to write to tempfile directly
   I.e. if a buildscript wrote to standard output, write that to target; or if
   it wrote to the tempfile directly, write that.
* Someday/maybe
** TODO Stylesheet-type dependencies
   A HTML file requires that a CSS file *exists*, but the HTML does not need to
   be recompiled when the CSS changes.
** TODO What about cyclic dependencies?
** TODO Should '--verbose' trigger '-v' option for buildscript shells?
   Seems excessive. Maybe only --debug should trigger this?
** TODO Don't create target file when buildscript doesn't output anything
   Is this a good idea, or will it confuse the user?

   Apenwarr redo generates no output file if nothing was written by a rule. Is
   this good? Should we do this too? (Note, however, that apenwarr redo also
   does not attempt to regenerate the non-existing output, unless any
   dependencies have changed. 'redo-ifchange target' works to build the target
   the first time, but after that it does not run unless changes were made in
   the dependencies.)

   This in itself is good for a target like 'all', but how about something like
   'clean'?
** TODO Remove 'File::Path' dependency(?)
   Is this really motivated? -- If so, need to replace 'mkpath' and 'rmtree'
   with own functions.
** TODO Allow a buildfile to generate target dirs and symlinks
* Inspiration
  Info about other redo, or redo inspired, implementations.
** [[http://neilmitchell.blogspot.se/2012/02/four-interesting-build-tools.html][Four Interesting Build Tools]] (by Neil Mitchell, on blogspot, 2012-02-28)
   A brief informative and inspiring overview of the four modern build tools
   'redo', 'ninja', 'tup' and 'fabricate', summing up their respective
   approaches and weighing the pros and cons of each.
** [[http://pozorvlak.livejournal.com/159621.html?nojs=1][A quick introduction to redo]] (by pozorvlak, on Livejournal, 2011-01-14)
** [[http://pozorvlak.livejournal.com/159126.html?nojs=1][Redo from scratch]] (by pozorvlak, on Livejournal, 2011-01-12)
** [[https://github.com/apenwarr/redo/tree/master/Documentation][Redo manpages]] (by Avery Pennarun, on GitHub)
** [[https://groups.google.com/forum/#!topic/redo-list/HEITPe64D1Q][Announcing `gup`, a fork of redo]] (by Tim Cuthbertson, on Redo Google Group)
   Summary: Redo has a problem in that, if it is run with its statefiles
   deleted, and there are previously generated targets still lying around, then
   those generated targets are taken for source files, and are (silently) not
   rebuilt. This is non-obvious, and requires manual intervention to fix. Gup
   solves this problem.
** [[https://github.com/gfxmonk/gup][Gup - A better make, inspired by djb's redo.]] (by gfxmonk, on GitHub)
** [[http://gfxmonk.net/][Announcing the gup build tool]] (by gfxmonk, own website, 2013-12-26)
** [[https://github.com/gittup/tup][Tup on GitHub]] (by Mike Shal, on GitHub, 2009)
** [[http://gittup.org/tup/][Tup]] (by Mike Shal, own website)
** [[http://chadaustin.me/2010/06/scalable-build-systems-an-analysis-of-tup/][Scalable Build Systems: An Analysis of Tup]] (by Chad Austin, own website)
** [[https://github.com/jekor/redo][djb's "redo" in Haskell]] (by Chris Forno, on GitHub)
* DONE (chronological order)
** DONE fix-test: Tests statefile contents.
   CLOSED: [2014-01-10 Fri 12:00]
** DONE Rename 'fixitude' -> 'fix'
   CLOSED: [2014-01-10 Fri 12:45]
   Keeping old 'fix' around under the name 'fix-old' until all interesting
   stuff has been grabbed from it.
** DONE Change exit status codes
   CLOSED: [2014-01-10 Fri 21:06]
   253 - One or more targets were externally modified
   254 - Command line parse errors
   255 - Low level error (failed to rename file etc.)

   Aborting on command line parse errors, should probably return 254(?) as this
   is quite an unlikely exit status from a buildscript. Also update 'EXIT
   STATUS' section in docs.
** DONE Add option '--xtrace'
   CLOSED: [2014-01-10 Fri 21:32]
   Described in POD (uncomment when implemented).
** DONE Add option '--verbose'
   CLOSED: [2014-01-10 Fri 21:32]
   Described in POD (uncomment when implemented).
** DONE Document $FIX_XTRACE
   CLOSED: [2014-01-11 Sat 06:55]
** DONE Document $FIX_VERBOSE
   CLOSED: [2014-01-11 Sat 06:55]
** DONE Merge documentation from old 'fix' into current source
   CLOSED: [2014-01-11 Sat 06:58]
