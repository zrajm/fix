-*- org -*-

* Testing
** TODO Add tests for file-oriented internal functions
** TODO Test '.fix/stats' in same way as runstate and keepstate
** TODO Combine internal & external tests into one
   (It's too easy to forget to run one of them before committing.)
** TODO Test $FIX_* variables
** TODO Test for B<--verbose>
** TODO Test for B<--xtrace>
** TODO Test error messages
* Main program
** TODO Pass args to buildscripts
   Should pass (same as Gup, but with both filenames as relative paths):

     $1 - (relative) path to a temporary output file
     $2 - (relative) path to the target

   If buildscript is in same directory as target, both $1 and $2 will be a
   simple filenames (with no path components).

   If buildscript is in a parent dir of the target, then that dirname will be
   included in $1 and $2.

   E.g. if you're building 'dir/target', and the buildscript invoked is
   'default.fix' (one directory down from the target). Then $1 =
   'dir/target-fixing', and $2 = 'dir/target'. (This is true even if you run
   fix from inside 'dir', using 'fix target'; or even if you're inside
   'dir/subdir' and run it using 'fix ../target'.)

   NOTA BENE: When implemented, check all occurrences of $1, $2 and $3 in POD
   and make sure they're updated to reflect what is actually passed to the
   buildscripts.
** TODO Scan for alternate buildscripts (not just 'TARGET.fix')
   If TARGET.fix isn't found, look for other possible buildscripts (in current
   directory and beyond). Look for these:

       TARGET.A.B.fix
       default.A.B.fix
       default.A.fix
       default.fix
       ../default.A.B.fix
       ../default.A.fix
       ../default.fix
       ../../default.A.B.fix
       ../../default.A.fix
       ../../default.fix
** TODO Refactor Local::Store
** TODO Checksum-based dependencies
   You have the following files: 'a' which depends on 'b' which depends on 'c'.

   You make a change in 'c', and run 'fix b' -- thereby causing 'b' and 'c' to
   be rebuilt (and have their updated state written).

   If you now run 'fix a', then 'a' *should* be rebuild, but, since 'a' only
   relies on 'b', and 'b' is up-to-date, then 'a' is up-to-date too!

   'a' should depend on 'b' + checksum of 'b', and 'b' should depend on 'c' +
   checksum of 'c', so that if file content changes, the file will be rebuilt,
   regardless of how the fix command was invoked.

** TODO Is something corresponding to 'redo-ifcreate' necessary?
** TODO Use PID lockfile avoid double invocations
** TODO Source config file '.fixrc' before running build
   This should be a shell script which exports stuff. It will run always run
   (with its $PWD in the base directory) before any buildscript is invoked, and
   can be used to set up $PATH and similar stuffs.
** TODO Logging
** TODO Drop Data::Dumper dependency
   Statefiles should be written in simple attribute/value format, so that a
   file looking like this (what about file name parsing -- something that can
   represent everything allowed in a filename?):

       checksum: b282f06fc2cb678ccf84e3ae8b1317be81252391
       deps: 'ab12.fix'
       deps: 'ab', '12'
       type: target

   Would load into a data structure looking like this:

       {
           'checksum' => 'b282f06fc2cb678ccf84e3ae8b1317be81252391',
           'deps' => [
               [ 'ab12.fix' ],
               [ 'ab', '12' ]
           ],
           'type' => 'target'
       }
** TODO Prettier output output each target name just once
** TODO Add option '--always' to rebuild everything
   Described in POD (uncomment when implemented).
   Alternative option names '--all' or '--dirty'?
** TODO Add option '--clean'
   Described in POD (uncomment when implemented).
** TODO Add option '--force'
   Described in POD (uncomment when implemented).
** TODO Add option '--list'
   Described in POD (uncomment when implemented).
** TODO Add option '--plot'(?) to generate Graphviz file of build graph
   Option name '--plot' maybe?
** TODO Add option '--target'(?) to specify target directory
   Mention this in POD (under 'buildscript' in GLOSSARY), when implemented.

   Fix should support having separate directories for source files,
   buildscripts and target files. E.g. you should be able to say something like
   '--target=publish', in order to have all generated targets produced in
   'publish' (a directory which would then contain *only* generated targets, no
   buildscripts, nor sources).
** TODO Add option '--watch'(?) to monitor and rebuild on changes
   Option name '--watch' or '--auto' maybe? Would use inotifywait to look for
   changes and rebuild, whenever something is written.
** TODO Write protected statefiles
   As in git, all statefiles should be chmodded '-w' to prevent accidental
   deletion.
** TODO Clean rebuilds when statedir was deleted.
   If a rebuild is attempted when statedir have been deleted - build anyway.
   Then, before renaming each temporary output file, compare it with any
   previously built target, and produce an 'target externally modified' error
   if the newly generated target looks different. (Don't produce error, just
   overwrite if '--force' is being used.)

   If the newly generated target looks the same, just update the state, and
   keep the old target.
** TODO Don't overwrite externally modified tempfiles
   I.e. refuse to do it, if it already exists, and wasn't produced by fixitude
   itself)
** TODO Parallel builds
   Fork and run parallel 'fix' for each argument given.
** TODO Magic numbers (#!) in buildscripts
   The following post on the Google Group for redo, suggests that all .do files
   should be "opaque executables". (Arguing that this would be a killer app for
   redo, allowing everyone to write build scripts *in their own language*.)

   [[ https://groups.google.com/forum/#!topic/redo-list/yeBwxcXvm8c][A solution to the portability (and a bunch of other) problems]]
** TODO Allow buildscripts to write to tempfile directly
   I.e. if a buildscript wrote to standard output, write that to target; or if
   it wrote to the tempfile directly, write that.
** TODO Abort more gracefully
   Abort should not exit brutally (e.g. causing stats to be broken except for
   the file causing the abort), but recurse gracefully back again.
   build_target() and update_targets() should maybe have three return values?

       1 = I did my stuff, and there were changes
       0 = I did my stuff, nothing was changed
      -1 = Something went wrong, KILL THIS BUILD NOW!

   Means we could ditch the runstate as well (since its currently only used for
   this).
** TODO Set up and run apenwarr redo's test scripts
** TODO Improve search for 'default.fix' files
   Currently searches (a bit naively) all the way to the root of the
   filesystem. The user should also be able to specify a specific directory for
   buildfiles (giving one the option of completely separating them from the
   source or build trees).

   I want git-like behavior -- fix should find the base of its work tree, and
   stay inside of that. (Optionally making use of variables FIX_WORK_TREE and
   FIX_DIR, see 'man git' on how that should work.)
** TODO Error messages should display filename relative to PWD
   Not relative to work_tree.
** TODO Display progress using relative paths
   Relative to the user's PWD, not work_tree, or anything else.
* Someday/maybe
** TODO Do depscans from work tree root dir?
   Right now fix doesn't care which dir it is in (except when executing
   buildscripts). But maybe we should do all dependency scanning while standing
   in the root dir of the work tree, then cd'ing for each buildscript we
   execute (cd'ing back to worktree root on recursive invocation). To much
   overhead?

   The benefit is that we can use paths relative to the work tree dir
   internally, and do not have to rewrite/convert paths name before writing
   them to state storage.
** TODO Deletion of dead build targets?
   Fix could delete dead targets. (Looking at their checksum to see whether or
   not they have changed. If no change has been made, then fix generated and
   "own" the target, and should be free to delete it.) Deleting of modified
   targets would be acceptable using '--force'.

   From "[[http://neilmitchell.blogspot.se/2012/02/four-interesting-build-tools.html][Four Interesting Build Tools]]" (by Neil Mitchell, February 2012):

       Tup uses this: If a rule to build 'foo' is deleted from the rule list,
       then Tup automatically deletes the file 'foo'. The problem of dead build
       results is serious, resulting in builds succeeding that should have
       failed, and that will fail as soon as a clean build is performed (to
       reduce this risk, we suggest an overnight build which starts from
       scratch). However, it is often useful to have build modes which generate
       skeleton files which are then modified by the user -- deleting these
       files would be most unwelcome. It would be easy to add support for
       deleting dead build results to Shake, but we choose not to.
** TODO Highlight test results
   Piping the test output through the following "one-liner" makes output
   prettier. This should be built into the test script.
   |perl -e 'BEGIN{%x=(qw/not 31 ok 32/,"",0)};$r=m/^(not|ok|)/;print"\e[$x{$&}m$_\e[m"'
** TODO Include tests in main program
   Maybe use __DATA__ to store test script separately, and then pipe it through
   Perl to use it? That way the parser won't have to process the test, unless
   they're actually used.
** TODO Stylesheet-type dependencies
   A HTML file requires that a CSS file *exists*, but the HTML does not need to
   be recompiled when the CSS changes.
** TODO What about cyclic dependencies?
** TODO Should '--verbose' trigger '-v' option for buildscript shells?
   Seems excessive. Maybe only --debug should trigger this?
** TODO Don't create target file when buildscript doesn't output anything
   Is this a good idea, or will it confuse the user?

   Apenwarr redo generates no output file if nothing was written by a rule. Is
   this good? Should we do this too? (Note, however, that apenwarr redo also
   does not attempt to regenerate the non-existing output, unless any
   dependencies have changed. 'redo-ifchange target' works to build the target
   the first time, but after that it does not run unless changes were made in
   the dependencies.)

   This in itself is good for a target like 'all', but how about something like
   'clean'?
** TODO Remove 'File::Path' dependency(?)
   Is this really motivated? -- If so, need to replace 'mkpath' and 'rmtree'
   with own functions.
** TODO Allow a buildfile to generate target dirs and symlinks
* Inspiration
  Info about other redo, or redo inspired, implementations.
** [[http://neilmitchell.blogspot.se/2012/02/four-interesting-build-tools.html][Four Interesting Build Tools]] (by Neil Mitchell, on blogspot, 2012-02-28)
   A brief informative and inspiring overview of the four modern build tools
   'redo', 'ninja', 'tup' and 'fabricate', summing up their respective
   approaches and weighing the pros and cons of each.
** [[http://pozorvlak.livejournal.com/159621.html?nojs=1][A quick introduction to redo]] (by pozorvlak, on Livejournal, 2011-01-14)
** [[http://pozorvlak.livejournal.com/159126.html?nojs=1][Redo from scratch]] (by pozorvlak, on Livejournal, 2011-01-12)
** [[https://github.com/apenwarr/redo/tree/master/Documentation][Redo manpages]] (by Avery Pennarun, on GitHub)
** [[https://groups.google.com/forum/#!topic/redo-list/HEITPe64D1Q][Announcing `gup`, a fork of redo]] (by Tim Cuthbertson, on Redo Google Group)
   Summary: Redo has a problem in that, if it is run with its statefiles
   deleted, and there are previously generated targets still lying around, then
   those generated targets are taken for source files, and are (silently) not
   rebuilt. This is non-obvious, and requires manual intervention to fix. Gup
   solves this problem.
** [[https://github.com/gfxmonk/gup][Gup - A better make, inspired by djb's redo.]] (by Tim Cuthbertson, on GitHub)
** [[http://gfxmonk.net/][Announcing the gup build tool]] (by Tim Cuthbertson, own website, 2013-12-26)
** [[https://github.com/gittup/tup][Tup on GitHub]] (by Mike Shal, on GitHub, 2009)
** [[http://gittup.org/tup/][Tup]] (by Mike Shal, own website)
** [[http://chadaustin.me/2010/06/scalable-build-systems-an-analysis-of-tup/][Scalable Build Systems: An Analysis of Tup]] (by Chad Austin, own website)
** [[https://github.com/jekor/redo][djb's "redo" in Haskell]] (by Chris Forno, on GitHub)
* DONE (chronological order)
** DONE fix-test: Tests statefile contents.
   CLOSED: [2014-01-10 Fri 12:00]
** DONE Rename 'fixitude' -> 'fix'
   CLOSED: [2014-01-10 Fri 12:45]
   Keeping old 'fix' around under the name 'fix-old' until all interesting
   stuff has been grabbed from it.
** DONE Change exit status codes
   CLOSED: [2014-01-10 Fri 21:06]
   253 - One or more targets were externally modified
   254 - Command line parse errors
   255 - Low level error (failed to rename file etc.)

   Aborting on command line parse errors, should probably return 254(?) as this
   is quite an unlikely exit status from a buildscript. Also update 'EXIT
   STATUS' section in docs.
** DONE Add option '--xtrace'
   CLOSED: [2014-01-10 Fri 21:32]
   Described in POD (uncomment when implemented).
** DONE Add option '--verbose'
   CLOSED: [2014-01-10 Fri 21:32]
   Described in POD (uncomment when implemented).
** DONE Document $FIX_XTRACE
   CLOSED: [2014-01-11 Sat 06:55]
** DONE Document $FIX_VERBOSE
   CLOSED: [2014-01-11 Sat 06:55]
** DONE Merge documentation from old 'fix' into current source
   CLOSED: [2014-01-11 Sat 06:58]
** DONE Separate runstate ('state/ABORT' should be there)
   CLOSED: [2014-01-11 Sat 11:12]
   Runstate is the state that is cleared when starting B<fix> (it is used for
   communication between the mother process and her children)
** DONE Test runstate content for ABORT
   CLOSED: [2014-01-11 Sat 14:06]
** DONE Add option '--stats' (for use when testing)
   CLOSED: [2014-01-11 Sat 16:33]
   Each child should load and increment a counter, so that we, after a complete
   build run, may see inspect it to see how many times fix was executed in
   order to build all dependencies.
** DONE Write measures taken for each target with '--stats'
   CLOSED: [2014-01-11 Sat 19:33]
** DONE Test measures taken for each file with '--stats')
   CLOSED: [2014-01-11 Sat 19:33]
** DONE Use absolute (logical) paths internally
   CLOSED: [2014-01-16 Thu 14:55]
   All state written should be relative to work_tree.
** DONE Relative paths should work
   CLOSED: [2014-01-16 Thu 15:50]
   I.e. one should be able to run 'fix test', as well as 'fix ../test' or 'fix
   HELLO/test' (where all those are referring to the same target 'test') with
   the exact same result.
** DONE Find fix work tree based on '.fixrc'
   CLOSED: [2014-01-16 Thu 15:51]
   Fix looks for '.fixrc' to know where the base of its work tree is. If no
   work tree is found, use is advised to 'touch .fixrc' to fix this.

   Invoking fix when $PWD is not inside a fix worktree should result in an
   error (this is what git does, regardless of whether files on the command
   line are inside a work tree or not). Git gives the following error when
   you're outside the work tree:

       fatal: Not a git repository (or any of the parent directories): .git
** DONE Tests for targets in parent dir, and subdir
   CLOSED: [2014-01-16 Thu 20:26]
** DONE Change dir before running a buildscript
   CLOSED: [2014-01-16 Thu 20:33]
   Change to the dir containing the buildscript before running it.
** DONE Fail on invoking fix with target outside current worktree
   CLOSED: [2014-01-16 Thu 20:54]
   Git says the following when you try to do this:
   fatal: '..' is outside repository
